package tract

// package tract_test

// TODO: uncomment file.

// import (
// 	"context"
// 	"fmt"
// 	"sync"
// 	// tract "github.com/23caterpie/Tract"
// )

// func ExampleWorkerFactory_tractWorkerFactorySync() {
// 	squareRootTract := NewWorkerTract("square root", 4, NewFactoryFromWorker[float64](SquareRootWorker{}))

// 	factory := NewTractWorkerFactory(squareRootTract)

// 	worker, err := factory.MakeWorker()
// 	if err != nil {
// 		//  Handle error
// 		return
// 	}

// 	args := []float64{0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100}

// 	for _, arg := range args {
// 		result, success := worker.Work(context.Background(), arg)
// 		if !success {
// 			fmt.Println("not successful")
// 		}
// 		fmt.Println(result)
// 	}

// 	worker.Close()
// 	factory.Close()

// 	// Output:
// 	// 0
// 	// 1
// 	// 2
// 	// 3
// 	// 4
// 	// 5
// 	// 6
// 	// 7
// 	// 8
// 	// 9
// 	// 10
// }

// func ExampleWorkerFactory_tractWorkerFactoryAsync() {
// 	squareRootTract := NewWorkerTract("square root", 4, NewFactoryFromWorker[float64](SquareRootWorker{}))

// 	factory := NewTractWorkerFactory(squareRootTract)

// 	worker, err := factory.MakeWorker()
// 	if err != nil {
// 		//  Handle error
// 		return
// 	}

// 	args := []float64{0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100}
// 	results := make([]float64, len(args))

// 	wg := sync.WaitGroup{}
// 	for i := range args {
// 		wg.Add(1)
// 		go func(j int) {
// 			defer wg.Done()
// 			result, success := worker.Work(context.Background(), args[j])
// 			if !success {
// 				fmt.Println("not successful")
// 			}
// 			results[j] = result
// 		}(i)
// 	}
// 	wg.Wait()
// 	for _, result := range results {
// 		fmt.Println(result)
// 	}

// 	worker.Close()
// 	factory.Close()

// 	// Output:
// 	// 0
// 	// 1
// 	// 2
// 	// 3
// 	// 4
// 	// 5
// 	// 6
// 	// 7
// 	// 8
// 	// 9
// 	// 10
// }
